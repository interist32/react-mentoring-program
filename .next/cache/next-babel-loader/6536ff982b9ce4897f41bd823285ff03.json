{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { useFormik, Form, Formik, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Movie, MovieBase } from '../../propTypes';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport './MovieForm.scss';\n\nvar FormInput = function FormInput(_ref) {\n  _s2();\n\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return /*#__PURE__*/React.createElement(\"label\", {\n    className: \"home-movie-form__label\"\n  }, label, /*#__PURE__*/React.createElement(Input, _extends({}, field, props)), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home-movie-form__error\"\n  }, meta.error) : null);\n};\n\n_s2(FormInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = FormInput;\n\nvar MovieForm = function MovieForm(_ref2) {\n  var mode = _ref2.mode,\n      movie = _ref2.movie,\n      _onSubmit = _ref2.onSubmit;\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: _objectSpread(_objectSpread({\n      title: '',\n      overview: '',\n      releaseDate: '',\n      posterPath: '',\n      runtime: ''\n    }, movie), {}, {\n      genres: movie ? movie.genres.join(', ') : ''\n    }),\n    validationSchema: Yup.object({\n      title: Yup.string().required('Title is required'),\n      overview: Yup.string().required('Overview is required'),\n      releaseDate: Yup.date(),\n      posterPath: Yup.string().url().required('Image must be a valid URL'),\n      genres: Yup.array().transform(function (value, originalValue) {\n        if (this.isType(value)) return value;\n        return originalValue.split(',').map(function (s) {\n          return s.trim();\n        }).filter(Boolean);\n      }).required('Comma separated genres are required'),\n      runtime: Yup.number().min(0).required('Duration is required')\n    }),\n    onSubmit: function onSubmit(values, _ref3) {\n      var setSubmitting = _ref3.setSubmitting;\n\n      var movie = _objectSpread(_objectSpread({}, values), {}, {\n        genres: values.genres.split(',').map(function (s) {\n          return s.trim();\n        }).filter(Boolean),\n        runtime: Number(values.runtime)\n      });\n\n      _onSubmit(movie);\n    }\n  }, function (formik) {\n    return /*#__PURE__*/React.createElement(Form, {\n      role: \"Movie\",\n      onSubmit: formik.handleSubmit\n    }, movie && movie.id ? /*#__PURE__*/React.createElement(FormInput, {\n      name: \"id\",\n      type: \"text\",\n      label: \"ID\",\n      readOnly: true\n    }) : null, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"title\",\n      type: \"text\",\n      label: \"Title\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"overview\",\n      type: \"text\",\n      label: \"Overview\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"releaseDate\",\n      type: \"date\",\n      label: \"Release date\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"posterPath\",\n      type: \"text\",\n      label: \"Movie Image URL\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"genres\",\n      type: \"text\",\n      label: \"Genres\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"runtime\",\n      type: \"number\",\n      label: \"Duration\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"home-movie-form__actions\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"reset\",\n      colorType: \"secondary\"\n    }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      colorType: \"primary\"\n    }, \"Save\")));\n  });\n};\n\n_c2 = MovieForm;\nMovieForm.propTypes = {\n  movie: PropTypes.oneOfType([Movie, MovieBase]),\n  onSubmit: PropTypes.func.isRequired\n};\nexport default MovieForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormInput\");\n$RefreshReg$(_c2, \"MovieForm\");","map":{"version":3,"sources":["C:/projects/react-mentoring-program/src/containers/Home/MovieForm.jsx"],"names":["React","useState","useFormik","Form","Formik","useField","Yup","PropTypes","Movie","MovieBase","Input","Button","FormInput","label","props","field","meta","touched","error","MovieForm","mode","movie","onSubmit","title","overview","releaseDate","posterPath","runtime","genres","join","object","string","required","date","url","array","transform","value","originalValue","isType","split","map","s","trim","filter","Boolean","number","min","values","setSubmitting","Number","formik","handleSubmit","id","propTypes","oneOfType","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useFormik, Form, Formik, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Movie, MovieBase } from '../../propTypes';\r\n\r\nimport Input from '../../components/Input/Input';\r\nimport Button from '../../components/Button/Button';\r\n\r\nimport './MovieForm.scss';\r\n\r\n\r\nconst FormInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    return (\r\n        <label className=\"home-movie-form__label\">\r\n            {label}\r\n            <Input\r\n                {...field}\r\n                {...props}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"home-movie-form__error\">\r\n                    {meta.error}\r\n                </div>\r\n            ) : null}\r\n        </label>\r\n    );\r\n};\r\n\r\n\r\nconst MovieForm = ({ mode, movie, onSubmit }) => {\r\n    return (<Formik\r\n        initialValues={{\r\n            title: '',\r\n            overview: '',\r\n            releaseDate: '',\r\n            posterPath: '',\r\n            runtime: '',\r\n            ...movie,\r\n            genres: movie ? movie.genres.join(', ') : '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n            title: Yup.string().required('Title is required'),\r\n            overview: Yup.string().required('Overview is required'),\r\n            releaseDate: Yup.date(),\r\n            posterPath: Yup.string().url().required('Image must be a valid URL'),\r\n            genres: Yup.array().transform(function (value, originalValue) {\r\n                if (this.isType(value)) return value;\r\n                return originalValue.split(',').map(s => s.trim()).filter(Boolean);\r\n            }).required('Comma separated genres are required'),\r\n            runtime: Yup.number().min(0).required('Duration is required'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n            const movie = {\r\n                ...values,\r\n                genres: values.genres.split(',').map(s => s.trim()).filter(Boolean),\r\n                runtime: Number(values.runtime),\r\n            };\r\n            onSubmit(movie);\r\n        }}\r\n    >\r\n        {(formik) => (\r\n            <Form role=\"Movie\" onSubmit={formik.handleSubmit}>\r\n                {movie && movie.id ?\r\n                    <FormInput name=\"id\" type=\"text\" label=\"ID\" readOnly /> :\r\n                    null\r\n                }\r\n                <FormInput name=\"title\" type=\"text\" label=\"Title\" />\r\n                <FormInput name=\"overview\" type=\"text\" label=\"Overview\" />\r\n                <FormInput name=\"releaseDate\" type=\"date\" label=\"Release date\" />\r\n                <FormInput name=\"posterPath\" type=\"text\" label=\"Movie Image URL\" />\r\n                <FormInput name=\"genres\" type=\"text\" label=\"Genres\" />\r\n                <FormInput name=\"runtime\" type=\"number\" label=\"Duration\" />\r\n                <div className=\"home-movie-form__actions\">\r\n                    <Button type=\"reset\" colorType=\"secondary\">Reset</Button>\r\n                    <Button type=\"submit\" colorType=\"primary\">Save</Button>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>)\r\n};\r\n\r\nMovieForm.propTypes = {\r\n    movie: PropTypes.oneOfType([Movie, MovieBase]),\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MovieForm;"]},"metadata":{},"sourceType":"module"}