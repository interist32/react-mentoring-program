{"ast":null,"code":"var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchMovies),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(getMovies),\n    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(createMovie),\n    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(addMovie),\n    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(updateMovie),\n    _marked6 = /*#__PURE__*/regeneratorRuntime.mark(editMovie),\n    _marked7 = /*#__PURE__*/regeneratorRuntime.mark(deleteMovie),\n    _marked8 = /*#__PURE__*/regeneratorRuntime.mark(removeMovie);\n\nimport 'regenerator-runtime/runtime.js';\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { addMovie as addMovieApi, deleteMovie as deleteMovieApi, getMovies as getMoviesApi, updateMovie as updateMovieApi } from '../../data/api';\nimport * as moviesActions from '../actions/movies';\n\nfunction fetchMovies(_ref) {\n  var title, movies;\n  return regeneratorRuntime.wrap(function fetchMovies$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          title = _ref.title;\n          _context.prev = 1;\n          _context.next = 4;\n          return getMoviesApi(title);\n\n        case 4:\n          movies = _context.sent;\n          _context.next = 7;\n          return put(moviesActions.getMoviesSuccess(movies));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(moviesActions.getMoviesError(_context.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nexport function getMovies() {\n  return regeneratorRuntime.wrap(function getMovies$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(moviesActions.GET_MOVIES, fetchMovies);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction createMovie(_ref2) {\n  var movie, newMovie;\n  return regeneratorRuntime.wrap(function createMovie$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          movie = _ref2.movie;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return addMovieApi(movie);\n\n        case 4:\n          newMovie = _context3.sent;\n          _context3.next = 7;\n          return put(moviesActions.addMovieSuccess(newMovie));\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 13;\n          return put(moviesActions.addMovieError(_context3.t0));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 9]]);\n}\n\nexport function addMovie() {\n  return regeneratorRuntime.wrap(function addMovie$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(moviesActions.ADD_MOVIE, createMovie);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction updateMovie(_ref3) {\n  var movie, updateResult;\n  return regeneratorRuntime.wrap(function updateMovie$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          movie = _ref3.movie;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return updateMovieApi(movie);\n\n        case 4:\n          updateResult = _context5.sent;\n          _context5.next = 7;\n          return put(moviesActions.updateMovieSuccess(updateResult));\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 13;\n          return put(moviesActions.updateMovieError(_context5.t0));\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 9]]);\n}\n\nexport function editMovie() {\n  return regeneratorRuntime.wrap(function editMovie$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(moviesActions.UPDATE_MOVIE, updateMovie);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction deleteMovie(_ref4) {\n  var movieId;\n  return regeneratorRuntime.wrap(function deleteMovie$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          movieId = _ref4.movieId;\n          _context7.prev = 1;\n          _context7.next = 4;\n          return deleteMovieApi(movieId);\n\n        case 4:\n          _context7.next = 6;\n          return put(moviesActions.deleteMovieSuccess(movieId));\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](1);\n          _context7.next = 12;\n          return put(moviesActions.deleteMovieError(_context7.t0));\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[1, 8]]);\n}\n\nexport function removeMovie() {\n  return regeneratorRuntime.wrap(function removeMovie$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(moviesActions.DELETE_MOVIE, deleteMovie);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}","map":{"version":3,"sources":["C:/projects/react-mentoring-program/src/store/sagas/movies.js"],"names":["fetchMovies","getMovies","createMovie","addMovie","updateMovie","editMovie","deleteMovie","removeMovie","call","put","takeEvery","takeLatest","addMovieApi","deleteMovieApi","getMoviesApi","updateMovieApi","moviesActions","title","movies","getMoviesSuccess","getMoviesError","message","GET_MOVIES","movie","newMovie","addMovieSuccess","addMovieError","ADD_MOVIE","updateResult","updateMovieSuccess","updateMovieError","UPDATE_MOVIE","movieId","deleteMovieSuccess","deleteMovieError","DELETE_MOVIE"],"mappings":"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","sourcesContent":["import 'regenerator-runtime/runtime.js';\r\n\r\nimport {call, put, takeEvery, takeLatest} from 'redux-saga/effects';\r\n\r\nimport {addMovie as addMovieApi, deleteMovie as deleteMovieApi, getMovies as getMoviesApi, updateMovie as updateMovieApi} from '../../data/api';\r\nimport * as moviesActions from '../actions/movies';\r\n\r\n\r\nfunction* fetchMovies({title}) {\r\n  try {\r\n    const movies = yield getMoviesApi(title);\r\n    yield put(moviesActions.getMoviesSuccess(movies));\r\n  } catch (error) {\r\n    yield put(moviesActions.getMoviesError(error.message));\r\n  }\r\n}\r\n\r\nexport function* getMovies() {\r\n  yield takeEvery(moviesActions.GET_MOVIES, fetchMovies);\r\n}\r\n\r\nfunction* createMovie({movie}) {\r\n  try {\r\n    const newMovie = yield addMovieApi(movie);\r\n    yield put(moviesActions.addMovieSuccess(newMovie));\r\n  } catch (error) {\r\n    yield put(moviesActions.addMovieError(error));\r\n  }\r\n}\r\n\r\nexport function* addMovie() {\r\n  yield takeEvery(moviesActions.ADD_MOVIE, createMovie);\r\n}\r\n\r\nfunction* updateMovie({movie}) {\r\n  try {\r\n    const updateResult = yield updateMovieApi(movie);\r\n    yield put(moviesActions.updateMovieSuccess(updateResult));\r\n  } catch (error) {\r\n    yield put(moviesActions.updateMovieError(error));\r\n  }\r\n}\r\n\r\nexport function* editMovie() {\r\n  yield takeEvery(moviesActions.UPDATE_MOVIE, updateMovie);\r\n}\r\n\r\nfunction* deleteMovie({movieId}) {\r\n  try {\r\n    yield deleteMovieApi(movieId);\r\n    yield put(moviesActions.deleteMovieSuccess(movieId));\r\n  } catch (error) {\r\n    yield put(moviesActions.deleteMovieError(error));\r\n  }\r\n}\r\n\r\nexport function* removeMovie() {\r\n  yield takeEvery(moviesActions.DELETE_MOVIE, deleteMovie);\r\n}"]},"metadata":{},"sourceType":"module"}