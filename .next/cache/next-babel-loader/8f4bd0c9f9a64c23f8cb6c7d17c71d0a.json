{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { useFormik, Form, Formik, useField } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Movie, MovieBase } from '../../propTypes';\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nimport './MovieForm.scss';\n\nvar FormInput = function FormInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return /*#__PURE__*/React.createElement(\"label\", {\n    className: \"home-movie-form__label\"\n  }, label, /*#__PURE__*/React.createElement(Input, _extends({}, field, props)), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home-movie-form__error\"\n  }, meta.error) : null);\n};\n\nvar MovieForm = function MovieForm(_ref2) {\n  var mode = _ref2.mode,\n      movie = _ref2.movie,\n      _onSubmit = _ref2.onSubmit;\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: _objectSpread(_objectSpread({\n      title: '',\n      overview: '',\n      releaseDate: '',\n      posterPath: '',\n      runtime: ''\n    }, movie), {}, {\n      genres: movie ? movie.genres.join(', ') : ''\n    }),\n    validationSchema: Yup.object({\n      title: Yup.string().required('Title is required'),\n      overview: Yup.string().required('Overview is required'),\n      releaseDate: Yup.date(),\n      posterPath: Yup.string().url().required('Image must be a valid URL'),\n      genres: Yup.array().transform(function (value, originalValue) {\n        if (this.isType(value)) return value;\n        return originalValue.split(',').map(function (s) {\n          return s.trim();\n        }).filter(Boolean);\n      }).required('Comma separated genres are required'),\n      runtime: Yup.number().min(0).required('Duration is required')\n    }),\n    onSubmit: function onSubmit(values, _ref3) {\n      var setSubmitting = _ref3.setSubmitting;\n\n      var movie = _objectSpread(_objectSpread({}, values), {}, {\n        genres: values.genres.split(',').map(function (s) {\n          return s.trim();\n        }).filter(Boolean),\n        runtime: Number(values.runtime)\n      });\n\n      _onSubmit(movie);\n    }\n  }, function (formik) {\n    return /*#__PURE__*/React.createElement(Form, {\n      role: \"Movie\",\n      onSubmit: formik.handleSubmit\n    }, movie && movie.id ? /*#__PURE__*/React.createElement(FormInput, {\n      name: \"id\",\n      type: \"text\",\n      label: \"ID\",\n      readOnly: true\n    }) : null, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"title\",\n      type: \"text\",\n      label: \"Title\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"overview\",\n      type: \"text\",\n      label: \"Overview\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"releaseDate\",\n      type: \"date\",\n      label: \"Release date\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"posterPath\",\n      type: \"text\",\n      label: \"Movie Image URL\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"genres\",\n      type: \"text\",\n      label: \"Genres\"\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      name: \"runtime\",\n      type: \"number\",\n      label: \"Duration\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"home-movie-form__actions\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"reset\",\n      colorType: \"secondary\"\n    }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      colorType: \"primary\"\n    }, \"Save\")));\n  });\n};\n\nMovieForm.propTypes = {\n  movie: PropTypes.oneOfType([Movie, MovieBase]),\n  onSubmit: PropTypes.func.isRequired\n};\nexport default MovieForm;","map":null,"metadata":{},"sourceType":"module"}